分前端页面和后台请求处理
后台：
    处理前端发送的请求，向数据库进行增删改查的操作
    /getAll获取数据库中的所有的员工数据
    /add 添加新员工
    /modify 修改某个员工的信息
    /delete 删除某个离职的员工信息
    =====可能来不及做的功能======
    /getEmps 获取部分员工的信息(满足某个条件)


    前端开发时，使用的是vue-cli脚手架工具启动的服务器，此时会产生跨域的问题
    所以需要先处理下跨域
    app.use(function(req,res,next){
        res.header('A-C-A-O','*')
        next()
    })

    对数据库的操作使用的是mongoose

前端：
    localhost:8080/ 看到所有员工列表
    配置路由，
    / => /list 组件为List.vue
    在List组件创建成功后获取数据库中的数据并解析
        为了获取数据，也为了方便代码的分离管理
        定义API封装所有向后台发送请求的方法
        然后在methods中定义获取数据的方法，在该方法中调用API封装的发送请求的方法
        最后到created中调用methods里的方法
    获取到的数据在其他组件中也有可能会用到，所以将其添加到vuex进行全局管理
        在store中定义状态state，emps：[]
        同时定义mutations，对emps进行操作
    再回到created中，将获取到的数据添加到vuex中：
        使用辅助函数mapMutations
    同时，考虑添加了新员工后，员工列表能及时更新，在List组件中添加beforeRouteEnter方法，在该方法中重新调用获取数据及设置数据的方法

    添加新员工
        配置相应的路由及组件
        组件中添加相应的文本框并绑定对应的v-model用于获取数据
        点击按钮发送添加员工的请求
            点击按钮-->methods中定义的方法-->调用API中封装的发送请求的方法
        添加成功后，路由自动切换为首页
            使用编程式导航
            this.$router.push('/')

    删除员工
        点击删除-->确认删除-->调用methods中的方法-->调用API方法
    员工管理
        配置路由以及对应修改员工信息的组件
        点击管理-->路由切换到修改信息
        因为是在当前List组件下产生并显示，所以修改员工信息组件应该放在List组件下，即父子组件关系
        修改好数据之后，点击按钮确定修改
            调用methods中的方法，该方法又调用API里的方法发送修改数据的请求
            修改成功后，路由跳转
            this.$router.push('/')